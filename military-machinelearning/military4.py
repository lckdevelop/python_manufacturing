import tensorflow as tf
import numpy as np

x_source = np.array([[180, 75], [190, 80], [170, 50], [185, 45], [175, 65], [178, 70], [165, 80], [160, 95], [170, 100], [185, 70]
, [168, 87], [179, 69], [172, 78], [172, 68], [172, 80], [164, 83], [169, 62], [180, 93], [188, 84], [190, 63]
, [186, 54], [163, 59], [170, 87], [175, 65], [189, 51], [169, 56], [165, 91], [177, 67], [172, 73], [161, 74]
, [180, 85], [160, 63], [172, 59], [173, 92], [165, 53], [174, 85], [189, 97], [182, 50], [186, 90], [188, 81]
, [185, 57], [179, 82], [190, 81], [161, 61], [190, 52], [172, 86], [168, 100], [190, 57], [160, 60], [177, 79]
, [189, 75], [162, 85], [166, 99], [180, 85], [180, 53], [184, 60], [163, 65], [180, 88], [180, 71], [160, 68]
, [167, 64], [187, 73], [163, 96], [173, 82], [167, 74], [189, 72], [178, 81], [175, 72], [188, 97], [164, 86]
, [181, 69], [172, 87], [168, 87], [186, 94], [190, 81], [165, 87], [180, 97], [160, 62], [185, 88], [170, 56]
, [186, 67], [190, 87], [174, 73], [174, 58], [168, 82], [177, 72], [160, 99], [176, 53], [186, 53], [165, 80]
, [160, 83], [179, 50], [182, 78], [179, 86], [180, 86], [182, 54], [161, 84], [180, 60], [187, 82], [164, 58]
, [162, 98], [189, 95], [180, 68], [164, 72], [160, 65], [174, 94], [188, 67], [165, 59], [178, 56], [175, 81]])

y_source = np.array([[0, 1], [0, 1], [1, 0], [1, 0], [0, 1], [0, 1], [0, 1], [1, 0], [1, 0], [0, 1]
, [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1]
, [1, 0], [1, 0], [0, 1], [0, 1], [1, 0], [1, 0], [1, 0], [0, 1], [0, 1], [0, 1]
, [0, 1], [0, 1], [0, 1], [0, 1], [1, 0], [0, 1], [0, 1], [1, 0], [0, 1], [0, 1]
, [1, 0], [0, 1], [0, 1], [0, 1], [1, 0], [0, 1], [1, 0], [1, 0], [0, 1], [0, 1]
, [0, 1], [0, 1], [1, 0], [0, 1], [1, 0], [1, 0], [0, 1], [0, 1], [0, 1], [0, 1]
, [0, 1], [0, 1], [1, 0], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1]
, [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [1, 0], [0, 1], [0, 1], [1, 0]
, [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [1, 0], [1, 0], [1, 0], [0, 1]
, [0, 1], [1, 0], [0, 1], [0, 1], [0, 1], [1, 0], [0, 1], [0, 1], [0, 1], [0, 1]
, [1, 0], [0, 1], [0, 1], [0, 1], [0, 1], [1, 0], [0, 1], [0, 1], [1, 0], [0, 1]])


test_source = [[180, 100], [180, 55], [165, 85]]

X = tf.placeholder(tf.float32)
Y = tf.placeholder(tf.float32)

W1 = tf.Variable(tf.random_uniform([2, 10], -1., 1.))
W2 = tf.Variable(tf.random_uniform([10, 2], -1., 1.))

b1 = tf.Variable(tf.zeros([10]))
b2 = tf.Variable(tf.zeros([2]))

L1 = tf.add(tf.matmul(X, W1), b1)
L1 = tf.nn.relu(L1)

model = tf.add(tf.matmul(L1, W2), b2)

cost = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(labels=Y, logits=model))

optimizer = tf.train.AdamOptimizer(learning_rate=0.01)
train_op = optimizer.minimize(cost)

init = tf.global_variables_initializer()
sess = tf.Session()
sess.run(init)

for step in range(500):
    sess.run(train_op, feed_dict={X: x_source, Y: y_source})

    if (step + 1) % 10 == 0:
        print(step + 1, sess.run(cost, feed_dict={X: x_source, Y: y_source}))
prediction = tf.argmax(model, 1)
target = tf.argmax(Y, 1)

print('예측:', sess.run(prediction, feed_dict={X: x_source}))
print('결과:', sess.run(target, feed_dict={Y: y_source}))

print('test데이터', test_source)
print('test데이터 예측:', sess.run(prediction, feed_dict={X: test_source}))

is_correct = tf.equal(prediction, target)
accuracy = tf.reduce_mean(tf.cast(is_correct, tf.float32))
print('정확도: %.2f' % sess.run(accuracy * 100, feed_dict={X: x_source, Y: y_source}))